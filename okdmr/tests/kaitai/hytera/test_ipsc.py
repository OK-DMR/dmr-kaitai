from typing import List

from okdmr.kaitai.hytera.ip_site_connect_protocol import IpSiteConnectProtocol
from okdmr.kaitai.tools.prettyprint import prettyprint


def test_ipsc():
    hexmessages: List[str] = [
        # wakeup
        "5a5a5a5a0000000042000501020000002222dddd555500004000000000000000000000000000020002000000000000000000000000000000b2dd503250380c00000014000000ff01",
        # data transmission ipsc sync
        "5a5a5a5a0000000042000501020000002222eeee555533334000bd0000008000150000000800fd00230038003b0038003b00b41200447eb7ffffef0844400000fd0800003b382300",
        # voice transmission ipsc sync
        "5a5a5a5a0000000042000501020000002222eeee555511114028000000000000000000006f00230038003b00342a2c10942a2c10f42a2c10833f0017e60a01006f0000003b382300",
    ]
    for hexmsg in hexmessages:
        ipsc_msg: IpSiteConnectProtocol = IpSiteConnectProtocol.from_bytes(
            bytes.fromhex(hexmsg)
        )
        prettyprint(ipsc_msg)
        print(ipsc_msg.ipsc_payload.hex())


def test_wakeup():
    hexmessages: List[str] = [
        "5a5a5a5a0000000042000501010000001111dddd11110000406c2710b06c27100c6d2710386d2710786d2710b86d2710186e2710786e271030307e0400fd00000000000c70d20401",
        "5a5a5a5a0000000042000501020000002222dddd11110000406c2710b06c27100c6d2710386d2710786d2710b86d2710186e2710786e271030307e0400fd00000000000c70d20401",
        "5a5a5a5a0000000042000501010000001111dddd11110000406c2710b06c27100c6d2710386d2710786d2710b86d2710186e2710786e2710303032420024000083040000006f0401",
        "5a5a5a5a0000000042000501020000002222dddd11110000406c2710b06c27100c6d2710386d2710786d2710b86d2710186e2710786e2710303032420024000083040000006f0401",
        "5a5a5a5a0000000042000501010000001111dddd11110000403030303030303030303030303030303030303030303030303030303030303030300000040201006f0000003b382300",
        "5a5a5a5a0000000042000501020000002222dddd11110000403030303030303030303030303030303030303030303030303030303030303030300000040201006f0000003b382300",
        "5a5a5a5a0000000042000501010000001111dddd11110000406c2710b06c27100c6d2710386d2710786d2710b86d2710186e2710786e2710303032420024000083040000006f0401",
        "5a5a5a5a0000000042000501020000002222dddd11110000406c2710b06c27100c6d2710386d2710786d2710b86d2710186e2710786e2710303032420024000083040000006f0401",
        "5a5a5a5a0000000042000501010000001111dddd1111000040303030303030303030303030303030303030303030303030303030303030303030ef08000001006f0000003b382300",
        "5a5a5a5a0000000042000501020000002222dddd1111000040303030303030303030303030303030303030303030303030303030303030303030ef08000001006f0000003b382300",
        "5a5a5a5a0000000042000501010000001111dddd11110000406c2710b06c27100c6d2710386d2710786d2710b86d2710186e2710786e271030300017e60a01006f0000003b382300",
        "5a5a5a5a0000000042000501020000002222dddd11110000406c2710b06c27100c6d2710386d2710786d2710b86d2710186e2710786e271030300017e60a01006f0000003b382300",
        "5a5a5a5a0000000042000501010000001111dddd11110000404e1910a44e1910004f19102c4f19106c4f1910ac4f19100c5019106c501910303032420024000083040000006f0401",
        "5a5a5a5a0000000042000501020000002222dddd11110000404e1910a44e1910004f19102c4f19106c4f1910ac4f19100c5019106c501910303032420024000083040000006f0401",
        "5a5a5a5a0000000042000501010000001111dddd11110000406c2710b06c27100c6d2710386d2710786d2710b86d2710186e2710786e271083260024320a01006f0000003b382300",
        "5a5a5a5a0000000042000501020000002222dddd11110000406c2710b06c27100c6d2710386d2710786d2710b86d2710186e2710786e271083260024320a01006f0000003b382300",
        "5a5a5a5a0000000042000501010000001111dddd111100004000000000000000000000000100020002000100000000000000000000000000ffffef082a0000000000140000004201",
        "5a5a5a5a0000000042000501020000002222dddd111100004000000000000000000000000100020002000100000000000000000000000000ffffef082a0000000000140000004201",
        "5a5a5a5a0000000042000501010000001111dddd111100004000000000000000000000000100020002000100000000000000000000000000ffffef082a0000000000000c70d50000",
        "5a5a5a5a0000000042000501020000002222dddd111100004000000000000000000000000100020002000100000000000000000000000000ffffef082a0000000000000c70d50000",
        "5a5a5a5a0000000042000501010000001111dddd555500004000000000000000000000000100020002000100000000000000000000000000ffffef08000000000000000c70d50000",
        "5a5a5a5a0000000042000501020000002222dddd555500004000000000000000000000000100020002000100000000000000000000000000ffffef08000000000000000c70d50000",
        "5a5a5a5a0000000042000501010000001111dddd555500004000000000000000000000000100020002000100000000000000000000000000ffffef082a0000000000000009382300",
        "5a5a5a5a0000000042000501020000002222dddd555500004000000000000000000000000100020002000100000000000000000000000000ffffef082a0000000000000009382300",
        "5a5a5a5a0000000042000501010000001111dddd55550000400000000000000000000000000002000200000000000000000000000000000083040033b00a01006f00000009382300",
        "5a5a5a5a0000000042000501020000002222dddd55550000400000000000000000000000000002000200000000000000000000000000000083040033b00a01006f00000009382300",
        "5a5a5a5a0000000042000501010000001111dddd555500004000000000000000000000000100020002000100000000000000000000000000ffffef082a0000000000000009382300",
        "5a5a5a5a0000000042000501020000002222dddd555500004000000000000000000000000100020002000100000000000000000000000000ffffef082a0000000000000009382300",
        "5a5a5a5a0000000042000501010000001111dddd555500004000000000000000000000000100020002000100000000000000000000000000ffffef082a0000000000000c70d40000",
        "5a5a5a5a0000000042000501020000002222dddd555500004000000000000000000000000100020002000100000000000000000000000000ffffef082a0000000000000c70d40000",
        "5a5a5a5a0000000042000501010000001111dddd111100004000000000000000000000000100000000000100000000000000000000000000ffffef0800000b00000080bf00000000",
        "5a5a5a5a0000000042000501020000002222dddd111100004000000000000000000000000100000000000100000000000000000000000000ffffef0800000b00000080bf00000000",
        "5a5a5a5a0000000042000501010000001111dddd555500004000000000000000000000000100020002000100000000000000000000000000ffffef082a0000000000000c71a50000",
        "5a5a5a5a0000000042000501020000002222dddd555500004000000000000000000000000100020002000100000000000000000000000000ffffef082a0000000000000c71a50000",
        "5a5a5a5a0000000042000501010000001111dddd111100004000000000000000000000000100020002000100000000000000000000000000ffffef082a000b000000000c71b36d04",
        "5a5a5a5a0000000042000501020000002222dddd111100004000000000000000000000000100020002000100000000000000000000000000ffffef082a000b000000000c71b36d04",
    ]
    for hexmsg in hexmessages:
        IPSC: IpSiteConnectProtocol = IpSiteConnectProtocol.from_bytes(
            bytes.fromhex(hexmsg)
        )

        # sanity check all tested payloads
        assert isinstance(IPSC, IpSiteConnectProtocol)

        if not IPSC.is_wakeup:
            # this will dump hex where internal is_wakeup bool indicator fails to recognize wakeup burst
            print(hexmsg)

        if (
            not IPSC.slot_type
            == IpSiteConnectProtocol.SlotTypes.slot_type_wakeup_request
        ):
            # debug different slot types, which might be interesting to know
            prettyprint(IPSC)

        # assert main purpose of this test-case
        assert IPSC.is_wakeup
